type token =
  | EVENT
  | BOOL
  | SHORT
  | INT
  | LONG
  | REAL
  | COMPLEX
  | CHAR
  | STRING
  | ENUM
  | STRUCT
  | BUNDLE
  | TRUE
  | FALSE
  | CONSTANT
  | SHARED
  | STATEVAR
  | TYPE
  | PROCESS
  | ACTION
  | NODE
  | FUNCTION
  | SAFE
  | DETERMINISTIC
  | UNSAFE
  | SPEC
  | INIT
  | PRAGMAS
  | END
  | EOF
  | LPAREN
  | RPAREN
  | LSQUAREPAREN
  | RSQUAREPAREN
  | COMMA
  | SEMICOLON
  | LBRACE
  | RBRACE
  | QUESTIONMARK
  | EXCMARK
  | NUMBERSIGN
  | VERTICALBAR
  | DOLLAR
  | WINDOW
  | DEFAULT
  | WHEN
  | CELL
  | DOTEQ
  | HAT
  | CLKZERO
  | CLKPLUS
  | CLKMINUS
  | CLKMULT
  | CLKEQ
  | CLKLTE
  | CLKGTE
  | CLKDIFF
  | NOT
  | OR
  | AND
  | XOR
  | EQ
  | DIFF
  | GT
  | GTE
  | LT
  | LTE
  | PLUS
  | MINUS
  | MULT
  | DIV
  | MODULO
  | POWER
  | COMPLEXDENOTE
  | IF
  | THEN
  | ELSE
  | LPAVER
  | RPAVER
  | WHERE
  | EXTERNAL
  | NUM_INT of (string)
  | NUM_FLOAT of (string)
  | NUM_COMPLEX of (string*string)
  | CHARACTER_CONST of (string)
  | STRING_CONST of (string)
  | IDENTIFIER of (string)
  | COMMENT

open Parsing;;
let _ = parse_error;;
# 8 "src/sig_parser.mly"
open Sig_abs
open Ptree
open Exceptions

# 99 "src/sig_parser.ml"
let yytransl_const = [|
  257 (* EVENT *);
  258 (* BOOL *);
  259 (* SHORT *);
  260 (* INT *);
  261 (* LONG *);
  262 (* REAL *);
  263 (* COMPLEX *);
  264 (* CHAR *);
  265 (* STRING *);
  266 (* ENUM *);
  267 (* STRUCT *);
  268 (* BUNDLE *);
  269 (* TRUE *);
  270 (* FALSE *);
  271 (* CONSTANT *);
  272 (* SHARED *);
  273 (* STATEVAR *);
  274 (* TYPE *);
  275 (* PROCESS *);
  276 (* ACTION *);
  277 (* NODE *);
  278 (* FUNCTION *);
  279 (* SAFE *);
  280 (* DETERMINISTIC *);
  281 (* UNSAFE *);
  282 (* SPEC *);
  283 (* INIT *);
  284 (* PRAGMAS *);
  285 (* END *);
    0 (* EOF *);
  286 (* LPAREN *);
  287 (* RPAREN *);
  288 (* LSQUAREPAREN *);
  289 (* RSQUAREPAREN *);
  290 (* COMMA *);
  291 (* SEMICOLON *);
  292 (* LBRACE *);
  293 (* RBRACE *);
  294 (* QUESTIONMARK *);
  295 (* EXCMARK *);
  296 (* NUMBERSIGN *);
  297 (* VERTICALBAR *);
  298 (* DOLLAR *);
  299 (* WINDOW *);
  300 (* DEFAULT *);
  301 (* WHEN *);
  302 (* CELL *);
  303 (* DOTEQ *);
  304 (* HAT *);
  305 (* CLKZERO *);
  306 (* CLKPLUS *);
  307 (* CLKMINUS *);
  308 (* CLKMULT *);
  309 (* CLKEQ *);
  310 (* CLKLTE *);
  311 (* CLKGTE *);
  312 (* CLKDIFF *);
  313 (* NOT *);
  314 (* OR *);
  315 (* AND *);
  316 (* XOR *);
  317 (* EQ *);
  318 (* DIFF *);
  319 (* GT *);
  320 (* GTE *);
  321 (* LT *);
  322 (* LTE *);
  323 (* PLUS *);
  324 (* MINUS *);
  325 (* MULT *);
  326 (* DIV *);
  327 (* MODULO *);
  328 (* POWER *);
  329 (* COMPLEXDENOTE *);
  330 (* IF *);
  331 (* THEN *);
  332 (* ELSE *);
  333 (* LPAVER *);
  334 (* RPAVER *);
  335 (* WHERE *);
  336 (* EXTERNAL *);
  343 (* COMMENT *);
    0|]

let yytransl_block = [|
  337 (* NUM_INT *);
  338 (* NUM_FLOAT *);
  339 (* NUM_COMPLEX *);
  340 (* CHARACTER_CONST *);
  341 (* STRING_CONST *);
  342 (* IDENTIFIER *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\003\000\004\000\004\000\004\000\
\004\000\005\000\009\000\009\000\009\000\009\000\010\000\010\000\
\010\000\010\000\008\000\008\000\011\000\013\000\013\000\014\000\
\014\000\006\000\006\000\006\000\016\000\016\000\017\000\017\000\
\017\000\018\000\018\000\019\000\019\000\007\000\007\000\007\000\
\020\000\020\000\020\000\023\000\024\000\026\000\026\000\025\000\
\027\000\027\000\028\000\028\000\029\000\029\000\029\000\029\000\
\021\000\021\000\022\000\022\000\022\000\022\000\033\000\033\000\
\030\000\034\000\034\000\035\000\035\000\035\000\035\000\035\000\
\037\000\037\000\031\000\038\000\038\000\039\000\039\000\039\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\041\000\041\000\012\000\012\000\012\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\042\000\043\000\043\000\036\000\000\000\000\000"

let yylen = "\002\000\
\002\000\000\000\001\000\002\000\007\000\000\000\002\000\003\000\
\004\000\004\000\000\000\001\000\002\000\003\000\000\000\001\000\
\002\000\003\000\001\000\003\000\002\000\001\000\003\000\001\000\
\003\000\000\000\003\000\004\000\001\000\002\000\001\000\004\000\
\005\000\001\000\002\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\003\000\001\000\003\000\002\000\
\003\000\004\000\001\000\003\000\001\000\001\000\001\000\001\000\
\003\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\002\000\003\000\001\000\005\000\003\000\003\000\001\000\006\000\
\003\000\001\000\003\000\003\000\001\000\003\000\003\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\003\000\004\000\004\000\002\000\003\000\004\000\005\000\003\000\
\005\000\003\000\005\000\003\000\003\000\001\000\002\000\002\000\
\003\000\003\000\003\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\006\000\003\000\
\005\000\001\000\003\000\003\000\004\000\004\000\005\000\006\000\
\006\000\007\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\004\000\001\000\003\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\157\000\000\000\000\000\158\000\
\000\000\001\000\004\000\000\000\000\000\000\000\144\000\145\000\
\146\000\147\000\148\000\149\000\150\000\151\000\152\000\000\000\
\007\000\141\000\000\000\019\000\000\000\142\000\143\000\000\000\
\000\000\082\000\083\000\000\000\000\000\000\000\000\000\102\000\
\000\000\000\000\000\000\000\000\084\000\085\000\086\000\087\000\
\000\000\000\000\130\000\000\000\000\000\000\000\008\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\088\000\000\000\103\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\020\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\005\000\000\000\000\000\039\000\040\000\041\000\
\042\000\043\000\000\000\000\000\128\000\000\000\000\000\131\000\
\000\000\000\000\000\000\000\000\000\000\089\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\124\000\000\000\
\153\000\000\000\000\000\023\000\000\000\000\000\010\000\027\000\
\000\000\000\000\030\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\000\000\000\000\
\134\000\000\000\090\000\000\000\000\000\000\000\000\000\000\000\
\000\000\091\000\000\000\034\000\000\000\028\000\000\000\044\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\
\000\000\056\000\053\000\000\000\051\000\054\000\055\000\000\000\
\129\000\000\000\000\000\135\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\000\037\000\000\000\000\000\000\000\000\000\
\067\000\049\000\000\000\000\000\137\000\136\000\000\000\033\000\
\047\000\000\000\000\000\077\000\000\000\000\000\050\000\052\000\
\138\000\000\000\000\000\000\000\000\000\070\000\000\000\066\000\
\000\000\078\000\076\000\000\000\156\000\000\000\074\000\000\000\
\068\000\072\000\000\000\073\000"

let yydgoto = "\003\000\
\005\000\006\000\007\000\014\000\033\000\062\000\115\000\027\000\
\060\000\109\000\028\000\029\000\057\000\058\000\129\000\112\000\
\113\000\197\000\173\000\117\000\118\000\119\000\120\000\121\000\
\122\000\207\000\181\000\212\000\213\000\214\000\215\000\051\000\
\124\000\232\000\233\000\255\000\008\001\243\000\244\000\052\000\
\064\000\031\000\053\000"

let yysindex = "\133\000\
\017\255\017\255\000\000\210\254\000\000\045\000\023\255\000\000\
\031\255\000\000\000\000\062\255\053\006\095\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\183\008\
\000\000\000\000\034\255\000\000\051\255\000\000\000\000\101\255\
\115\255\000\000\000\000\183\008\075\255\183\008\183\008\000\000\
\183\008\183\008\183\008\183\008\000\000\000\000\000\000\000\000\
\053\255\069\010\000\000\135\255\122\255\218\006\000\000\151\255\
\147\255\000\000\018\007\157\255\231\254\094\007\065\009\171\255\
\000\000\165\010\000\000\197\010\121\255\121\255\003\010\124\007\
\183\008\181\007\123\255\013\009\183\008\183\008\183\008\183\008\
\183\008\183\008\183\008\183\008\183\008\183\008\183\008\183\008\
\183\008\183\008\183\008\183\008\183\008\183\008\183\008\183\008\
\183\008\183\008\183\008\183\008\018\007\183\008\000\000\000\000\
\183\008\051\255\177\255\018\007\190\255\213\255\188\255\234\254\
\000\000\094\007\000\000\037\010\196\254\000\000\000\000\000\000\
\000\000\000\000\000\000\207\255\000\000\183\008\183\008\000\000\
\069\010\246\254\192\009\203\255\022\255\000\000\183\008\003\255\
\005\255\185\255\165\010\007\255\101\010\101\010\133\010\238\255\
\197\010\238\255\208\010\208\010\103\255\103\255\103\255\103\255\
\165\255\165\255\236\254\236\254\236\254\200\255\000\000\108\009\
\000\000\069\010\069\010\000\000\018\007\228\255\000\000\000\000\
\189\255\242\255\000\000\000\000\221\254\183\008\183\008\183\008\
\183\008\183\008\192\255\070\009\000\000\183\008\151\009\224\009\
\000\000\183\008\000\000\238\007\246\255\121\255\183\008\183\008\
\183\008\000\000\018\007\000\000\224\254\000\000\094\007\000\000\
\069\010\069\010\069\010\069\010\069\010\000\000\248\255\018\007\
\199\255\000\000\000\000\238\254\000\000\000\000\000\000\069\010\
\000\000\183\008\069\010\000\000\060\255\039\008\121\255\121\255\
\121\255\198\255\000\000\000\000\201\255\202\255\216\255\255\255\
\000\000\000\000\027\009\069\010\000\000\000\000\065\255\000\000\
\000\000\229\255\003\000\000\000\182\255\199\255\000\000\000\000\
\000\000\096\008\202\255\005\000\209\255\000\000\012\000\000\000\
\069\010\000\000\000\000\210\255\000\000\226\255\000\000\146\255\
\000\000\000\000\227\255\000\000"

let yyrindex = "\000\000\
\059\001\059\001\000\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\033\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\245\254\
\126\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\170\255\000\000\000\000\000\000\000\000\000\000\129\255\
\254\254\000\000\008\255\030\000\000\000\000\000\035\000\000\000\
\000\000\049\006\000\000\092\005\023\001\088\001\000\000\000\000\
\000\000\000\000\000\000\179\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\255\036\000\000\000\000\000\240\254\000\000\
\000\000\000\000\000\000\000\000\096\003\000\000\000\000\000\000\
\000\000\000\000\143\003\031\005\000\000\000\000\000\000\000\000\
\099\255\000\000\000\000\081\000\000\000\000\000\000\000\145\002\
\195\002\132\006\099\006\095\002\212\006\006\007\162\006\192\005\
\142\005\248\005\248\004\042\005\035\004\085\004\135\004\191\004\
\191\003\241\003\245\002\045\003\095\003\229\000\000\000\000\000\
\000\000\206\255\230\255\000\000\043\255\074\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\077\000\000\000\
\000\000\000\000\000\000\000\000\131\000\138\001\000\000\000\000\
\000\000\000\000\082\000\000\000\000\000\000\000\000\000\000\000\
\081\005\180\004\125\005\175\005\231\005\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\233\004\
\000\000\000\000\110\255\000\000\000\000\000\000\188\001\253\001\
\047\002\242\254\000\000\000\000\000\000\000\000\119\255\009\255\
\000\000\000\000\000\000\038\007\000\000\000\000\000\000\000\000\
\000\000\184\255\055\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\191\255\000\000\
\237\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\115\001\094\255\000\000\000\000\000\000\144\255\205\255\
\000\000\000\000\218\255\180\255\000\000\013\001\024\000\000\000\
\009\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\150\000\000\000\000\000\197\255\
\000\000\000\000\140\000\161\000\000\000\000\000\166\000\243\255\
\196\255\000\000\000\000"

let yytablesize = 3097
let yytable = "\030\000\
\045\000\172\000\123\000\110\000\226\000\199\000\170\000\107\000\
\003\000\179\000\234\000\130\000\031\000\133\000\032\000\104\000\
\235\000\210\000\180\000\011\000\185\000\076\000\077\000\186\000\
\161\000\080\000\021\000\011\000\021\000\191\000\081\000\192\000\
\021\000\193\000\021\000\004\000\021\000\065\000\012\000\009\000\
\030\000\013\000\200\000\065\000\010\000\030\000\012\000\050\000\
\080\000\013\000\080\000\098\000\099\000\227\000\123\000\186\000\
\166\000\011\000\189\000\063\000\111\000\066\000\067\000\111\000\
\068\000\069\000\070\000\071\000\054\000\031\000\055\000\032\000\
\210\000\014\000\098\000\099\000\098\000\099\000\098\000\099\000\
\132\000\014\000\072\000\075\000\073\000\116\000\228\000\030\000\
\074\000\075\000\237\000\012\000\075\000\186\000\030\000\249\000\
\131\000\013\000\186\000\136\000\137\000\138\000\139\000\140\000\
\141\000\142\000\143\000\144\000\145\000\146\000\147\000\148\000\
\149\000\150\000\151\000\152\000\153\000\154\000\155\000\156\000\
\157\000\158\000\159\000\160\000\032\000\162\000\104\000\221\000\
\163\000\139\000\133\000\230\000\139\000\001\000\002\000\139\000\
\056\000\116\000\059\000\123\000\140\000\211\000\061\000\140\000\
\076\000\077\000\140\000\071\000\080\000\183\000\184\000\030\000\
\071\000\071\000\101\000\102\000\104\000\024\000\190\000\024\000\
\065\000\239\000\024\000\024\000\100\000\024\000\030\000\024\000\
\254\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\010\001\105\000\092\000\011\001\106\000\030\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\252\000\
\098\000\099\000\030\000\108\000\211\000\201\000\202\000\203\000\
\204\000\205\000\154\000\154\000\126\000\216\000\076\000\077\000\
\134\000\219\000\080\000\165\000\080\000\024\000\223\000\224\000\
\225\000\080\000\080\000\069\000\167\000\030\000\116\000\169\000\
\069\000\069\000\076\000\077\000\123\000\079\000\080\000\030\000\
\188\000\095\000\096\000\097\000\098\000\099\000\155\000\155\000\
\168\000\236\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\025\000\182\000\025\000\253\000\195\000\025\000\
\025\000\079\000\025\000\026\000\025\000\198\000\079\000\079\000\
\099\000\001\001\196\000\222\000\245\000\206\000\125\000\076\000\
\077\000\229\000\240\000\080\000\231\000\045\000\241\000\242\000\
\246\000\250\000\004\001\045\000\251\000\005\001\006\001\007\001\
\085\000\045\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\009\001\
\012\001\081\000\002\000\081\000\015\000\081\000\006\000\081\000\
\081\000\081\000\016\000\081\000\139\000\081\000\045\000\081\000\
\081\000\081\000\081\000\081\000\081\000\081\000\045\000\045\000\
\081\000\081\000\081\000\081\000\081\000\081\000\081\000\126\000\
\081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
\017\000\081\000\081\000\132\000\081\000\132\000\140\000\132\000\
\018\000\132\000\132\000\132\000\008\000\132\000\164\000\132\000\
\171\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
\248\000\000\001\132\000\132\000\132\000\132\000\132\000\132\000\
\132\000\094\000\132\000\132\000\132\000\132\000\132\000\132\000\
\132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
\132\000\132\000\002\001\132\000\132\000\133\000\132\000\133\000\
\003\001\133\000\000\000\133\000\133\000\133\000\000\000\133\000\
\000\000\133\000\000\000\133\000\133\000\133\000\133\000\133\000\
\133\000\133\000\000\000\000\000\133\000\133\000\133\000\133\000\
\133\000\133\000\133\000\095\000\133\000\133\000\133\000\133\000\
\133\000\133\000\133\000\133\000\133\000\133\000\133\000\133\000\
\133\000\133\000\133\000\133\000\000\000\133\000\133\000\092\000\
\133\000\092\000\000\000\092\000\092\000\092\000\000\000\092\000\
\000\000\092\000\000\000\092\000\092\000\092\000\092\000\092\000\
\092\000\092\000\000\000\000\000\092\000\092\000\092\000\092\000\
\092\000\092\000\092\000\000\000\092\000\092\000\092\000\092\000\
\092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
\092\000\092\000\092\000\092\000\097\000\092\000\092\000\123\000\
\092\000\123\000\000\000\123\000\000\000\123\000\123\000\123\000\
\000\000\123\000\000\000\123\000\000\000\123\000\123\000\123\000\
\123\000\123\000\123\000\123\000\000\000\000\000\123\000\123\000\
\123\000\123\000\123\000\123\000\123\000\000\000\123\000\123\000\
\123\000\123\000\123\000\123\000\123\000\123\000\123\000\123\000\
\123\000\123\000\123\000\123\000\123\000\000\000\099\000\123\000\
\123\000\125\000\123\000\125\000\000\000\125\000\000\000\125\000\
\125\000\125\000\000\000\125\000\000\000\125\000\000\000\125\000\
\125\000\125\000\125\000\125\000\125\000\125\000\000\000\000\000\
\125\000\125\000\125\000\125\000\125\000\125\000\125\000\000\000\
\125\000\125\000\125\000\125\000\125\000\125\000\125\000\125\000\
\125\000\125\000\125\000\125\000\125\000\125\000\098\000\000\000\
\000\000\125\000\125\000\000\000\125\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\126\000\000\000\126\000\000\000\126\000\000\000\
\126\000\126\000\126\000\000\000\126\000\000\000\126\000\000\000\
\126\000\126\000\126\000\126\000\126\000\126\000\126\000\000\000\
\000\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
\093\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
\126\000\126\000\126\000\126\000\126\000\126\000\126\000\000\000\
\000\000\000\000\126\000\126\000\094\000\126\000\094\000\000\000\
\094\000\000\000\094\000\094\000\094\000\000\000\094\000\000\000\
\094\000\000\000\094\000\094\000\094\000\094\000\094\000\094\000\
\094\000\000\000\000\000\094\000\094\000\094\000\094\000\094\000\
\094\000\094\000\096\000\094\000\094\000\094\000\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
\094\000\000\000\000\000\000\000\094\000\094\000\095\000\094\000\
\095\000\000\000\095\000\000\000\095\000\095\000\095\000\000\000\
\095\000\000\000\095\000\000\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\000\000\000\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\120\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\000\000\000\000\000\000\095\000\095\000\
\000\000\095\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\000\
\000\000\097\000\000\000\097\000\000\000\097\000\097\000\097\000\
\000\000\097\000\000\000\097\000\000\000\097\000\097\000\097\000\
\097\000\097\000\097\000\097\000\121\000\000\000\097\000\097\000\
\097\000\097\000\097\000\097\000\097\000\000\000\097\000\097\000\
\097\000\097\000\097\000\097\000\097\000\097\000\097\000\097\000\
\097\000\097\000\097\000\097\000\000\000\000\000\000\000\097\000\
\097\000\099\000\097\000\099\000\000\000\099\000\000\000\099\000\
\099\000\099\000\000\000\099\000\000\000\099\000\000\000\099\000\
\099\000\099\000\099\000\099\000\099\000\099\000\122\000\038\000\
\099\000\099\000\099\000\099\000\099\000\099\000\099\000\000\000\
\099\000\099\000\099\000\099\000\099\000\099\000\099\000\099\000\
\099\000\099\000\099\000\099\000\099\000\099\000\000\000\000\000\
\000\000\099\000\099\000\098\000\099\000\098\000\000\000\098\000\
\098\000\098\000\000\000\098\000\000\000\098\000\000\000\098\000\
\098\000\098\000\098\000\098\000\098\000\098\000\058\000\000\000\
\098\000\098\000\098\000\098\000\098\000\098\000\098\000\000\000\
\098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
\098\000\098\000\098\000\098\000\098\000\098\000\000\000\000\000\
\000\000\098\000\098\000\000\000\098\000\093\000\000\000\093\000\
\000\000\093\000\093\000\093\000\000\000\093\000\000\000\093\000\
\000\000\093\000\093\000\093\000\093\000\093\000\118\000\093\000\
\000\000\000\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\000\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
\000\000\000\000\000\000\093\000\093\000\000\000\093\000\096\000\
\000\000\096\000\000\000\096\000\096\000\096\000\000\000\096\000\
\000\000\096\000\000\000\096\000\096\000\096\000\096\000\096\000\
\119\000\096\000\000\000\000\000\096\000\096\000\096\000\096\000\
\096\000\096\000\096\000\000\000\096\000\096\000\096\000\096\000\
\096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
\096\000\096\000\000\000\000\000\000\000\096\000\096\000\120\000\
\096\000\120\000\000\000\120\000\000\000\120\000\120\000\120\000\
\000\000\120\000\000\000\120\000\000\000\120\000\000\000\000\000\
\120\000\120\000\114\000\120\000\000\000\000\000\120\000\120\000\
\120\000\120\000\120\000\120\000\120\000\000\000\120\000\120\000\
\120\000\120\000\120\000\120\000\120\000\120\000\120\000\120\000\
\120\000\120\000\120\000\120\000\000\000\000\000\000\000\120\000\
\120\000\000\000\120\000\000\000\000\000\000\000\000\000\121\000\
\000\000\121\000\000\000\121\000\000\000\121\000\121\000\121\000\
\000\000\121\000\000\000\121\000\115\000\121\000\000\000\000\000\
\121\000\121\000\000\000\121\000\000\000\000\000\121\000\121\000\
\121\000\121\000\121\000\121\000\121\000\000\000\121\000\121\000\
\121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
\121\000\121\000\121\000\121\000\000\000\000\000\000\000\121\000\
\121\000\122\000\121\000\122\000\038\000\122\000\000\000\122\000\
\122\000\122\000\038\000\122\000\000\000\122\000\116\000\122\000\
\038\000\000\000\122\000\122\000\000\000\122\000\000\000\000\000\
\122\000\122\000\122\000\122\000\122\000\122\000\122\000\000\000\
\122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
\122\000\122\000\122\000\122\000\122\000\122\000\000\000\000\000\
\000\000\122\000\122\000\058\000\122\000\038\000\000\000\000\000\
\000\000\058\000\000\000\064\000\000\000\000\000\000\000\058\000\
\130\000\130\000\130\000\130\000\130\000\130\000\117\000\000\000\
\130\000\130\000\130\000\130\000\130\000\130\000\130\000\000\000\
\130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
\130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
\000\000\118\000\000\000\118\000\058\000\118\000\000\000\118\000\
\118\000\118\000\000\000\118\000\000\000\118\000\000\000\118\000\
\063\000\000\000\118\000\118\000\000\000\118\000\000\000\000\000\
\118\000\118\000\118\000\118\000\118\000\118\000\118\000\112\000\
\118\000\118\000\118\000\118\000\118\000\118\000\118\000\118\000\
\118\000\118\000\118\000\000\000\000\000\000\000\000\000\000\000\
\000\000\118\000\118\000\119\000\118\000\119\000\000\000\119\000\
\000\000\119\000\119\000\119\000\000\000\119\000\000\000\119\000\
\000\000\119\000\000\000\000\000\119\000\119\000\059\000\119\000\
\000\000\000\000\119\000\119\000\119\000\119\000\119\000\119\000\
\119\000\113\000\119\000\119\000\119\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\000\000\000\000\000\000\
\000\000\000\000\000\000\119\000\119\000\114\000\119\000\114\000\
\000\000\114\000\000\000\114\000\114\000\114\000\000\000\114\000\
\000\000\114\000\000\000\114\000\000\000\000\000\114\000\114\000\
\057\000\114\000\000\000\000\000\114\000\114\000\114\000\114\000\
\114\000\114\000\114\000\108\000\114\000\114\000\114\000\114\000\
\114\000\114\000\114\000\114\000\114\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\114\000\115\000\
\114\000\115\000\000\000\115\000\000\000\115\000\115\000\115\000\
\000\000\115\000\000\000\115\000\060\000\115\000\000\000\000\000\
\115\000\115\000\000\000\115\000\000\000\000\000\115\000\115\000\
\115\000\115\000\115\000\115\000\115\000\110\000\115\000\115\000\
\115\000\115\000\115\000\115\000\115\000\115\000\115\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\115\000\
\115\000\116\000\115\000\116\000\000\000\116\000\000\000\116\000\
\116\000\116\000\000\000\116\000\000\000\116\000\061\000\116\000\
\000\000\000\000\116\000\116\000\000\000\116\000\000\000\000\000\
\116\000\116\000\116\000\116\000\116\000\116\000\116\000\109\000\
\116\000\116\000\116\000\116\000\116\000\116\000\116\000\116\000\
\116\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\000\116\000\116\000\000\000\116\000\000\000\064\000\000\000\
\000\000\117\000\000\000\117\000\064\000\117\000\000\000\117\000\
\117\000\117\000\000\000\117\000\000\000\117\000\062\000\117\000\
\064\000\000\000\117\000\117\000\000\000\117\000\000\000\000\000\
\117\000\117\000\117\000\117\000\117\000\117\000\117\000\111\000\
\117\000\117\000\117\000\117\000\117\000\117\000\117\000\117\000\
\117\000\064\000\000\000\000\000\000\000\063\000\000\000\000\000\
\000\000\117\000\117\000\063\000\117\000\000\000\000\000\000\000\
\000\000\063\000\112\000\000\000\112\000\000\000\112\000\000\000\
\112\000\112\000\112\000\000\000\112\000\063\000\112\000\000\000\
\112\000\000\000\000\000\112\000\112\000\000\000\112\000\000\000\
\000\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
\104\000\112\000\112\000\112\000\112\000\112\000\063\000\000\000\
\000\000\000\000\000\000\059\000\000\000\000\000\000\000\000\000\
\000\000\059\000\112\000\112\000\113\000\112\000\113\000\059\000\
\113\000\000\000\113\000\113\000\113\000\000\000\113\000\000\000\
\113\000\000\000\113\000\000\000\000\000\113\000\113\000\000\000\
\113\000\000\000\000\000\113\000\113\000\113\000\113\000\113\000\
\113\000\113\000\101\000\113\000\113\000\113\000\113\000\113\000\
\000\000\000\000\000\000\000\000\059\000\057\000\000\000\000\000\
\000\000\000\000\000\000\057\000\113\000\113\000\108\000\113\000\
\108\000\057\000\108\000\000\000\108\000\108\000\108\000\000\000\
\108\000\000\000\108\000\100\000\108\000\000\000\000\000\108\000\
\108\000\000\000\108\000\000\000\000\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\000\000\108\000\108\000\108\000\
\000\000\060\000\000\000\000\000\000\000\000\000\057\000\060\000\
\000\000\107\000\000\000\000\000\000\000\060\000\108\000\108\000\
\110\000\108\000\110\000\000\000\110\000\000\000\110\000\110\000\
\110\000\000\000\110\000\000\000\110\000\000\000\110\000\000\000\
\000\000\110\000\110\000\000\000\110\000\000\000\000\000\110\000\
\110\000\110\000\110\000\110\000\110\000\110\000\000\000\110\000\
\110\000\110\000\060\000\061\000\000\000\000\000\000\000\000\000\
\000\000\061\000\000\000\105\000\000\000\000\000\000\000\061\000\
\110\000\110\000\109\000\110\000\109\000\000\000\109\000\000\000\
\109\000\109\000\109\000\000\000\109\000\000\000\109\000\000\000\
\109\000\000\000\000\000\109\000\109\000\000\000\109\000\000\000\
\000\000\109\000\109\000\109\000\109\000\109\000\109\000\109\000\
\000\000\109\000\000\000\109\000\061\000\000\000\000\000\000\000\
\000\000\000\000\000\000\062\000\000\000\106\000\000\000\000\000\
\000\000\062\000\109\000\109\000\000\000\109\000\000\000\062\000\
\000\000\000\000\111\000\000\000\111\000\000\000\111\000\000\000\
\111\000\111\000\111\000\000\000\111\000\000\000\111\000\000\000\
\111\000\000\000\000\000\111\000\111\000\127\000\111\000\000\000\
\000\000\111\000\111\000\111\000\111\000\111\000\111\000\111\000\
\000\000\111\000\000\000\111\000\062\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\000\000\000\000\
\000\000\000\000\111\000\111\000\000\000\111\000\000\000\000\000\
\000\000\000\000\000\000\104\000\000\000\104\000\000\000\104\000\
\000\000\104\000\104\000\104\000\024\000\104\000\000\000\104\000\
\025\000\104\000\000\000\000\000\104\000\104\000\000\000\104\000\
\000\000\000\000\104\000\104\000\104\000\104\000\104\000\104\000\
\104\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\104\000\104\000\101\000\104\000\101\000\
\000\000\101\000\000\000\101\000\101\000\101\000\000\000\101\000\
\000\000\101\000\026\000\101\000\000\000\000\000\101\000\101\000\
\000\000\101\000\000\000\000\000\101\000\101\000\101\000\101\000\
\101\000\101\000\101\000\000\000\000\000\000\000\100\000\000\000\
\100\000\000\000\100\000\000\000\100\000\100\000\100\000\000\000\
\100\000\000\000\100\000\000\000\100\000\101\000\101\000\100\000\
\101\000\000\000\100\000\000\000\000\000\100\000\100\000\100\000\
\100\000\100\000\100\000\100\000\107\000\000\000\107\000\000\000\
\107\000\000\000\107\000\107\000\107\000\000\000\107\000\000\000\
\107\000\000\000\107\000\000\000\000\000\000\000\100\000\100\000\
\107\000\100\000\000\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\107\000\107\000\105\000\107\000\
\105\000\000\000\105\000\000\000\105\000\105\000\105\000\000\000\
\105\000\024\000\105\000\000\000\105\000\000\000\103\000\000\000\
\000\000\000\000\105\000\000\000\000\000\105\000\105\000\000\000\
\105\000\105\000\105\000\105\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\000\000\000\000\000\000\105\000\105\000\
\106\000\105\000\106\000\000\000\106\000\000\000\106\000\106\000\
\106\000\000\000\106\000\000\000\106\000\000\000\106\000\026\000\
\000\000\024\000\000\000\000\000\106\000\000\000\000\000\106\000\
\106\000\000\000\106\000\106\000\106\000\106\000\000\000\000\000\
\127\000\000\000\127\000\000\000\127\000\000\000\127\000\127\000\
\127\000\000\000\127\000\000\000\127\000\000\000\127\000\000\000\
\106\000\106\000\000\000\106\000\127\000\000\000\000\000\000\000\
\000\000\000\000\127\000\127\000\127\000\127\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\026\000\
\000\000\000\000\034\000\035\000\000\000\000\000\000\000\000\000\
\127\000\127\000\000\000\127\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\037\000\000\000\000\000\
\034\000\035\000\038\000\000\000\000\000\039\000\040\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\036\000\128\000\000\000\000\000\000\000\000\000\000\000\
\042\000\043\000\000\000\037\000\000\000\000\000\000\000\044\000\
\038\000\000\000\114\000\039\000\040\000\000\000\045\000\046\000\
\000\000\047\000\048\000\049\000\041\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\042\000\043\000\
\000\000\034\000\035\000\000\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\046\000\000\000\047\000\
\048\000\049\000\036\000\000\000\000\000\000\000\000\000\000\000\
\000\000\132\000\000\000\000\000\037\000\000\000\000\000\000\000\
\000\000\038\000\000\000\000\000\039\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\042\000\
\043\000\000\000\034\000\035\000\000\000\000\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\046\000\000\000\
\047\000\048\000\049\000\036\000\220\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\000\000\000\000\
\000\000\000\000\038\000\000\000\000\000\039\000\040\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\042\000\043\000\000\000\034\000\035\000\000\000\000\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\046\000\
\000\000\047\000\048\000\049\000\036\000\238\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\000\000\038\000\000\000\000\000\039\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\042\000\043\000\000\000\034\000\035\000\000\000\000\000\
\044\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\046\000\000\000\047\000\048\000\049\000\036\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\037\000\
\000\000\000\000\026\000\026\000\038\000\000\000\000\000\039\000\
\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\043\000\000\000\026\000\000\000\000\000\
\000\000\044\000\026\000\000\000\000\000\026\000\026\000\253\000\
\045\000\046\000\000\000\047\000\048\000\049\000\026\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\026\000\026\000\000\000\034\000\035\000\000\000\000\000\026\000\
\000\000\000\000\026\000\000\000\000\000\000\000\026\000\026\000\
\000\000\026\000\026\000\026\000\036\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\000\000\038\000\000\000\000\000\039\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\043\000\000\000\000\000\000\000\000\000\000\000\
\044\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\046\000\000\000\047\000\048\000\049\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\000\000\000\000\
\000\000\034\000\035\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\000\000\000\000\000\000\135\000\
\000\000\208\000\036\000\000\000\209\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\000\000\247\000\
\000\000\000\000\024\000\000\000\039\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\000\000\
\000\000\000\000\000\000\000\000\208\000\000\000\044\000\209\000\
\004\000\000\000\000\000\000\000\000\000\045\000\046\000\125\000\
\047\000\048\000\049\000\000\000\000\000\024\000\000\000\000\000\
\000\000\000\000\076\000\077\000\078\000\079\000\080\000\000\000\
\026\000\000\000\081\000\082\000\083\000\000\000\000\000\000\000\
\000\000\000\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\194\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\076\000\077\000\078\000\
\079\000\080\000\000\000\026\000\000\000\081\000\082\000\083\000\
\000\000\000\000\000\000\000\000\000\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\217\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\076\000\077\000\078\000\079\000\080\000\000\000\000\000\000\000\
\081\000\082\000\083\000\000\000\000\000\000\000\000\000\000\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\187\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\076\000\077\000\078\000\079\000\080\000\000\000\000\000\
\000\000\081\000\082\000\083\000\000\000\000\000\000\000\000\000\
\000\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\076\000\077\000\078\000\079\000\080\000\000\000\000\000\
\000\000\081\000\082\000\083\000\000\000\000\000\000\000\000\000\
\000\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\000\000\000\000\218\000\076\000\077\000\078\000\079\000\
\080\000\000\000\000\000\000\000\081\000\082\000\083\000\000\000\
\000\000\000\000\000\000\000\000\084\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\000\000\127\000\076\000\077\000\
\078\000\079\000\080\000\174\000\000\000\000\000\081\000\082\000\
\083\000\175\000\176\000\177\000\178\000\000\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\076\000\077\000\
\078\000\079\000\080\000\000\000\000\000\000\000\081\000\082\000\
\083\000\000\000\000\000\000\000\000\000\000\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\076\000\077\000\
\078\000\079\000\080\000\000\000\000\000\000\000\000\000\000\000\
\083\000\000\000\000\000\000\000\000\000\000\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\076\000\077\000\
\078\000\079\000\080\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\076\000\077\000\
\000\000\000\000\080\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\076\000\077\000\
\000\000\000\000\080\000\000\000\000\000\000\000\000\000\000\000\
\000\000\076\000\077\000\000\000\000\000\080\000\000\000\000\000\
\000\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000"

let yycheck = "\013\000\
\000\000\114\000\062\000\029\001\037\001\041\001\029\001\059\000\
\000\000\070\001\029\001\072\000\029\001\074\000\029\001\054\000\
\035\001\180\000\079\001\031\001\031\001\042\001\043\001\034\001\
\101\000\046\001\029\001\039\001\031\001\027\001\000\000\027\001\
\035\001\027\001\037\001\019\001\039\001\029\001\031\001\086\001\
\054\000\031\001\078\001\035\001\000\000\059\000\039\001\024\000\
\046\001\039\001\046\001\072\001\073\001\086\001\114\000\034\001\
\108\000\035\001\037\001\036\000\086\001\038\000\039\000\086\001\
\041\000\042\000\043\000\044\000\035\001\086\001\037\001\086\001\
\235\000\031\001\072\001\073\001\072\001\073\001\072\001\073\001\
\000\000\039\001\030\001\029\001\032\001\062\000\199\000\101\000\
\036\001\035\001\031\001\061\001\040\001\034\001\108\000\031\001\
\073\000\036\001\034\001\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\030\001\102\000\165\000\188\000\
\105\000\031\001\000\000\208\000\034\001\001\000\002\000\037\001\
\086\001\114\000\038\001\199\000\031\001\180\000\028\001\034\001\
\042\001\043\001\037\001\029\001\046\001\126\000\127\000\165\000\
\034\001\035\001\033\001\034\001\195\000\029\001\135\000\031\001\
\086\001\222\000\034\001\035\001\030\001\037\001\180\000\039\001\
\245\000\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\031\001\027\001\000\000\034\001\034\001\195\000\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\072\001\073\001\208\000\039\001\235\000\174\000\175\000\176\000\
\177\000\178\000\033\001\034\001\034\001\182\000\042\001\043\001\
\086\001\186\000\046\001\035\001\029\001\032\001\191\000\192\000\
\193\000\034\001\035\001\029\001\031\001\235\000\199\000\036\001\
\034\001\035\001\042\001\043\001\000\000\045\001\046\001\245\000\
\030\001\069\001\070\001\071\001\072\001\073\001\033\001\034\001\
\028\001\218\000\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\029\001\053\001\031\001\080\001\035\001\034\001\
\035\001\029\001\037\001\086\001\039\001\028\001\034\001\035\001\
\073\001\250\000\086\001\030\001\061\001\086\001\000\000\042\001\
\043\001\034\001\085\001\046\001\086\001\029\001\086\001\086\001\
\034\001\061\001\030\001\035\001\034\001\085\001\027\001\086\001\
\059\001\041\001\061\001\062\001\063\001\064\001\065\001\066\001\
\067\001\068\001\069\001\070\001\071\001\072\001\073\001\086\001\
\086\001\027\001\000\000\029\001\031\001\031\001\030\001\033\001\
\034\001\035\001\031\001\037\001\034\001\039\001\070\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\078\001\079\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\000\000\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\031\001\075\001\076\001\027\001\078\001\029\001\034\001\031\001\
\031\001\033\001\034\001\035\001\002\000\037\001\106\000\039\001\
\112\000\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\235\000\246\000\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\000\000\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\250\000\075\001\076\001\027\001\078\001\029\001\
\251\000\031\001\255\255\033\001\034\001\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\255\255\255\255\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\000\000\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\255\255\075\001\076\001\029\001\
\078\001\031\001\255\255\033\001\034\001\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\255\255\255\255\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\255\255\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\000\000\075\001\076\001\027\001\
\078\001\029\001\255\255\031\001\255\255\033\001\034\001\035\001\
\255\255\037\001\255\255\039\001\255\255\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\255\255\255\255\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\255\255\000\000\075\001\
\076\001\027\001\078\001\029\001\255\255\031\001\255\255\033\001\
\034\001\035\001\255\255\037\001\255\255\039\001\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\255\255\255\255\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\255\255\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\000\000\255\255\
\255\255\075\001\076\001\255\255\078\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\255\255\029\001\255\255\031\001\255\255\
\033\001\034\001\035\001\255\255\037\001\255\255\039\001\255\255\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\255\255\
\255\255\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\000\000\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\255\255\
\255\255\255\255\075\001\076\001\027\001\078\001\029\001\255\255\
\031\001\255\255\033\001\034\001\035\001\255\255\037\001\255\255\
\039\001\255\255\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\255\255\255\255\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\000\000\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\070\001\
\071\001\255\255\255\255\255\255\075\001\076\001\027\001\078\001\
\029\001\255\255\031\001\255\255\033\001\034\001\035\001\255\255\
\037\001\255\255\039\001\255\255\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\255\255\255\255\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\000\000\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\255\255\255\255\255\255\075\001\076\001\
\255\255\078\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\255\255\029\001\255\255\031\001\255\255\033\001\034\001\035\001\
\255\255\037\001\255\255\039\001\255\255\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\000\000\255\255\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\255\255\255\255\255\255\075\001\
\076\001\027\001\078\001\029\001\255\255\031\001\255\255\033\001\
\034\001\035\001\255\255\037\001\255\255\039\001\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\000\000\000\000\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\255\255\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\255\255\255\255\
\255\255\075\001\076\001\029\001\078\001\031\001\255\255\033\001\
\034\001\035\001\255\255\037\001\255\255\039\001\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\000\000\255\255\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\255\255\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\255\255\255\255\
\255\255\075\001\076\001\255\255\078\001\029\001\255\255\031\001\
\255\255\033\001\034\001\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\042\001\043\001\044\001\045\001\000\000\047\001\
\255\255\255\255\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\255\255\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\255\255\255\255\255\255\075\001\076\001\255\255\078\001\029\001\
\255\255\031\001\255\255\033\001\034\001\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\042\001\043\001\044\001\045\001\
\000\000\047\001\255\255\255\255\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\255\255\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\255\255\255\255\255\255\075\001\076\001\027\001\
\078\001\029\001\255\255\031\001\255\255\033\001\034\001\035\001\
\255\255\037\001\255\255\039\001\255\255\041\001\255\255\255\255\
\044\001\045\001\000\000\047\001\255\255\255\255\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\255\255\255\255\255\255\075\001\
\076\001\255\255\078\001\255\255\255\255\255\255\255\255\027\001\
\255\255\029\001\255\255\031\001\255\255\033\001\034\001\035\001\
\255\255\037\001\255\255\039\001\000\000\041\001\255\255\255\255\
\044\001\045\001\255\255\047\001\255\255\255\255\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\255\255\255\255\255\255\075\001\
\076\001\027\001\078\001\029\001\029\001\031\001\255\255\033\001\
\034\001\035\001\035\001\037\001\255\255\039\001\000\000\041\001\
\041\001\255\255\044\001\045\001\255\255\047\001\255\255\255\255\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\255\255\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\255\255\255\255\
\255\255\075\001\076\001\029\001\078\001\078\001\255\255\255\255\
\255\255\035\001\255\255\000\000\255\255\255\255\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\000\000\255\255\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\255\255\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\255\255\027\001\255\255\029\001\078\001\031\001\255\255\033\001\
\034\001\035\001\255\255\037\001\255\255\039\001\255\255\041\001\
\000\000\255\255\044\001\045\001\255\255\047\001\255\255\255\255\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\000\000\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\255\255\255\255\255\255\255\255\255\255\
\255\255\075\001\076\001\027\001\078\001\029\001\255\255\031\001\
\255\255\033\001\034\001\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\255\255\255\255\044\001\045\001\000\000\047\001\
\255\255\255\255\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\000\000\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\065\001\066\001\067\001\068\001\255\255\255\255\255\255\
\255\255\255\255\255\255\075\001\076\001\027\001\078\001\029\001\
\255\255\031\001\255\255\033\001\034\001\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\255\255\255\255\044\001\045\001\
\000\000\047\001\255\255\255\255\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\000\000\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\075\001\076\001\027\001\
\078\001\029\001\255\255\031\001\255\255\033\001\034\001\035\001\
\255\255\037\001\255\255\039\001\000\000\041\001\255\255\255\255\
\044\001\045\001\255\255\047\001\255\255\255\255\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\000\000\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\075\001\
\076\001\027\001\078\001\029\001\255\255\031\001\255\255\033\001\
\034\001\035\001\255\255\037\001\255\255\039\001\000\000\041\001\
\255\255\255\255\044\001\045\001\255\255\047\001\255\255\255\255\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\000\000\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\075\001\076\001\255\255\078\001\255\255\035\001\255\255\
\255\255\027\001\255\255\029\001\041\001\031\001\255\255\033\001\
\034\001\035\001\255\255\037\001\255\255\039\001\000\000\041\001\
\053\001\255\255\044\001\045\001\255\255\047\001\255\255\255\255\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\000\000\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\078\001\255\255\255\255\255\255\029\001\255\255\255\255\
\255\255\075\001\076\001\035\001\078\001\255\255\255\255\255\255\
\255\255\041\001\027\001\255\255\029\001\255\255\031\001\255\255\
\033\001\034\001\035\001\255\255\037\001\053\001\039\001\255\255\
\041\001\255\255\255\255\044\001\045\001\255\255\047\001\255\255\
\255\255\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\000\000\058\001\059\001\060\001\061\001\062\001\078\001\255\255\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\035\001\075\001\076\001\027\001\078\001\029\001\041\001\
\031\001\255\255\033\001\034\001\035\001\255\255\037\001\255\255\
\039\001\255\255\041\001\255\255\255\255\044\001\045\001\255\255\
\047\001\255\255\255\255\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\000\000\058\001\059\001\060\001\061\001\062\001\
\255\255\255\255\255\255\255\255\078\001\029\001\255\255\255\255\
\255\255\255\255\255\255\035\001\075\001\076\001\027\001\078\001\
\029\001\041\001\031\001\255\255\033\001\034\001\035\001\255\255\
\037\001\255\255\039\001\000\000\041\001\255\255\255\255\044\001\
\045\001\255\255\047\001\255\255\255\255\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\255\255\058\001\059\001\060\001\
\255\255\029\001\255\255\255\255\255\255\255\255\078\001\035\001\
\255\255\000\000\255\255\255\255\255\255\041\001\075\001\076\001\
\027\001\078\001\029\001\255\255\031\001\255\255\033\001\034\001\
\035\001\255\255\037\001\255\255\039\001\255\255\041\001\255\255\
\255\255\044\001\045\001\255\255\047\001\255\255\255\255\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\255\255\058\001\
\059\001\060\001\078\001\029\001\255\255\255\255\255\255\255\255\
\255\255\035\001\255\255\000\000\255\255\255\255\255\255\041\001\
\075\001\076\001\027\001\078\001\029\001\255\255\031\001\255\255\
\033\001\034\001\035\001\255\255\037\001\255\255\039\001\255\255\
\041\001\255\255\255\255\044\001\045\001\255\255\047\001\255\255\
\255\255\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\058\001\255\255\060\001\078\001\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\255\255\000\000\255\255\255\255\
\255\255\035\001\075\001\076\001\255\255\078\001\255\255\041\001\
\255\255\255\255\027\001\255\255\029\001\255\255\031\001\255\255\
\033\001\034\001\035\001\255\255\037\001\255\255\039\001\255\255\
\041\001\255\255\255\255\044\001\045\001\000\000\047\001\255\255\
\255\255\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\058\001\255\255\060\001\078\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\255\255\255\255\075\001\076\001\255\255\078\001\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\029\001\255\255\031\001\
\255\255\033\001\034\001\035\001\032\001\037\001\255\255\039\001\
\036\001\041\001\255\255\255\255\044\001\045\001\255\255\047\001\
\255\255\255\255\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\075\001\076\001\027\001\078\001\029\001\
\255\255\031\001\255\255\033\001\034\001\035\001\255\255\037\001\
\255\255\039\001\086\001\041\001\255\255\255\255\044\001\045\001\
\255\255\047\001\255\255\255\255\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\255\255\255\255\255\255\027\001\255\255\
\029\001\255\255\031\001\255\255\033\001\034\001\035\001\255\255\
\037\001\255\255\039\001\255\255\041\001\075\001\076\001\044\001\
\078\001\255\255\047\001\255\255\255\255\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\027\001\255\255\029\001\255\255\
\031\001\255\255\033\001\034\001\035\001\255\255\037\001\255\255\
\039\001\255\255\041\001\255\255\255\255\255\255\075\001\076\001\
\047\001\078\001\255\255\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\075\001\076\001\027\001\078\001\
\029\001\255\255\031\001\255\255\033\001\034\001\035\001\255\255\
\037\001\032\001\039\001\255\255\041\001\255\255\037\001\255\255\
\255\255\255\255\047\001\255\255\255\255\050\001\051\001\255\255\
\053\001\054\001\055\001\056\001\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\255\255\255\255\255\255\075\001\076\001\
\027\001\078\001\029\001\255\255\031\001\255\255\033\001\034\001\
\035\001\255\255\037\001\255\255\039\001\255\255\041\001\086\001\
\255\255\032\001\255\255\255\255\047\001\255\255\255\255\050\001\
\051\001\255\255\053\001\054\001\055\001\056\001\255\255\255\255\
\027\001\255\255\029\001\255\255\031\001\255\255\033\001\034\001\
\035\001\255\255\037\001\255\255\039\001\255\255\041\001\255\255\
\075\001\076\001\255\255\078\001\047\001\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\086\001\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\075\001\076\001\255\255\078\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\040\001\255\255\255\255\
\013\001\014\001\045\001\255\255\255\255\048\001\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\057\001\255\255\
\255\255\030\001\031\001\255\255\255\255\255\255\255\255\255\255\
\067\001\068\001\255\255\040\001\255\255\255\255\255\255\074\001\
\045\001\255\255\077\001\048\001\049\001\255\255\081\001\082\001\
\255\255\084\001\085\001\086\001\057\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\067\001\068\001\
\255\255\013\001\014\001\255\255\255\255\074\001\255\255\255\255\
\255\255\255\255\255\255\255\255\081\001\082\001\255\255\084\001\
\085\001\086\001\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\037\001\255\255\255\255\040\001\255\255\255\255\255\255\
\255\255\045\001\255\255\255\255\048\001\049\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\057\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\067\001\
\068\001\255\255\013\001\014\001\255\255\255\255\074\001\255\255\
\255\255\255\255\255\255\255\255\255\255\081\001\082\001\255\255\
\084\001\085\001\086\001\030\001\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\255\255\048\001\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\057\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\067\001\068\001\255\255\013\001\014\001\255\255\255\255\074\001\
\255\255\255\255\255\255\255\255\255\255\255\255\081\001\082\001\
\255\255\084\001\085\001\086\001\030\001\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\255\255\
\255\255\255\255\255\255\045\001\255\255\255\255\048\001\049\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\067\001\068\001\255\255\013\001\014\001\255\255\255\255\
\074\001\255\255\255\255\255\255\255\255\255\255\255\255\081\001\
\082\001\255\255\084\001\085\001\086\001\030\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\040\001\
\255\255\255\255\013\001\014\001\045\001\255\255\255\255\048\001\
\049\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\057\001\255\255\255\255\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\067\001\068\001\255\255\040\001\255\255\255\255\
\255\255\074\001\045\001\255\255\255\255\048\001\049\001\080\001\
\081\001\082\001\255\255\084\001\085\001\086\001\057\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\067\001\068\001\255\255\013\001\014\001\255\255\255\255\074\001\
\255\255\255\255\077\001\255\255\255\255\255\255\081\001\082\001\
\255\255\084\001\085\001\086\001\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\255\255\
\255\255\255\255\255\255\045\001\255\255\255\255\048\001\049\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\067\001\068\001\255\255\255\255\255\255\255\255\255\255\
\074\001\255\255\255\255\255\255\255\255\255\255\255\255\081\001\
\082\001\255\255\084\001\085\001\086\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\255\255\013\001\014\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\255\255\255\255\027\001\
\255\255\015\001\030\001\255\255\018\001\019\001\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\255\255\255\255\029\001\
\255\255\255\255\032\001\255\255\048\001\049\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\057\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\255\255\255\255\015\001\255\255\074\001\018\001\
\019\001\255\255\255\255\255\255\255\255\081\001\082\001\031\001\
\084\001\085\001\086\001\255\255\255\255\032\001\255\255\255\255\
\255\255\255\255\042\001\043\001\044\001\045\001\046\001\255\255\
\086\001\255\255\050\001\051\001\052\001\255\255\255\255\255\255\
\255\255\255\255\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\043\001\044\001\
\045\001\046\001\255\255\086\001\255\255\050\001\051\001\052\001\
\255\255\255\255\255\255\255\255\255\255\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\042\001\043\001\044\001\045\001\046\001\255\255\255\255\255\255\
\050\001\051\001\052\001\255\255\255\255\255\255\255\255\255\255\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\043\001\044\001\045\001\046\001\255\255\255\255\
\255\255\050\001\051\001\052\001\255\255\255\255\255\255\255\255\
\255\255\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\042\001\043\001\044\001\045\001\046\001\255\255\255\255\
\255\255\050\001\051\001\052\001\255\255\255\255\255\255\255\255\
\255\255\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\255\255\255\255\076\001\042\001\043\001\044\001\045\001\
\046\001\255\255\255\255\255\255\050\001\051\001\052\001\255\255\
\255\255\255\255\255\255\255\255\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\255\255\075\001\042\001\043\001\
\044\001\045\001\046\001\047\001\255\255\255\255\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\042\001\043\001\
\044\001\045\001\046\001\255\255\255\255\255\255\050\001\051\001\
\052\001\255\255\255\255\255\255\255\255\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\042\001\043\001\
\044\001\045\001\046\001\255\255\255\255\255\255\255\255\255\255\
\052\001\255\255\255\255\255\255\255\255\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\042\001\043\001\
\044\001\045\001\046\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\042\001\043\001\
\255\255\255\255\046\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\042\001\043\001\
\255\255\255\255\046\001\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\043\001\255\255\255\255\046\001\255\255\255\255\
\255\255\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001"

let yynames_const = "\
  EVENT\000\
  BOOL\000\
  SHORT\000\
  INT\000\
  LONG\000\
  REAL\000\
  COMPLEX\000\
  CHAR\000\
  STRING\000\
  ENUM\000\
  STRUCT\000\
  BUNDLE\000\
  TRUE\000\
  FALSE\000\
  CONSTANT\000\
  SHARED\000\
  STATEVAR\000\
  TYPE\000\
  PROCESS\000\
  ACTION\000\
  NODE\000\
  FUNCTION\000\
  SAFE\000\
  DETERMINISTIC\000\
  UNSAFE\000\
  SPEC\000\
  INIT\000\
  PRAGMAS\000\
  END\000\
  EOF\000\
  LPAREN\000\
  RPAREN\000\
  LSQUAREPAREN\000\
  RSQUAREPAREN\000\
  COMMA\000\
  SEMICOLON\000\
  LBRACE\000\
  RBRACE\000\
  QUESTIONMARK\000\
  EXCMARK\000\
  NUMBERSIGN\000\
  VERTICALBAR\000\
  DOLLAR\000\
  WINDOW\000\
  DEFAULT\000\
  WHEN\000\
  CELL\000\
  DOTEQ\000\
  HAT\000\
  CLKZERO\000\
  CLKPLUS\000\
  CLKMINUS\000\
  CLKMULT\000\
  CLKEQ\000\
  CLKLTE\000\
  CLKGTE\000\
  CLKDIFF\000\
  NOT\000\
  OR\000\
  AND\000\
  XOR\000\
  EQ\000\
  DIFF\000\
  GT\000\
  GTE\000\
  LT\000\
  LTE\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  MODULO\000\
  POWER\000\
  COMPLEXDENOTE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LPAVER\000\
  RPAVER\000\
  WHERE\000\
  EXTERNAL\000\
  COMMENT\000\
  "

let yynames_block = "\
  NUM_INT\000\
  NUM_FLOAT\000\
  NUM_COMPLEX\000\
  CHARACTER_CONST\000\
  STRING_CONST\000\
  IDENTIFIER\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Sig_abs.sig_file) in
    Obj.repr(
# 146 "src/sig_parser.mly"
 (
		_1
	)
# 1246 "src/sig_parser.ml"
               : Sig_abs.sig_file))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "src/sig_parser.mly"
 (
		([],Ptree.EMPTY)
	)
# 1254 "src/sig_parser.ml"
               : Sig_abs.sig_file))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'process_decl) in
    Obj.repr(
# 157 "src/sig_parser.mly"
 (
		let (procl,sig_ltree) = _1 in
		(procl,List.hd sig_ltree)
	)
# 1264 "src/sig_parser.ml"
               : Sig_abs.sig_file))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'process_decl) in
    Obj.repr(
# 162 "src/sig_parser.mly"
 (
		let (procl,sig_ltree) = _1 in
		(procl,List.hd sig_ltree)
	)
# 1274 "src/sig_parser.ml"
               : Sig_abs.sig_file))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'parameters) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'interface) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'directives) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'p_expr) in
    Obj.repr(
# 171 "src/sig_parser.mly"
 (
		let (invars, outvars) = _5 and (leq,lloc,ltdef,lhprocl,lprocl,ptree) = _7 in	
		let currentproc = 
			{ name = _2;
				paramenters = _4;
				inputs = invars;
				outputs = outvars;
				locals = lloc;
				typedefs = ltdef;
				equations = leq;
				hiddenprocs = lhprocl;
			}
		in match ptree with
		| [] -> (currentproc::lprocl, [make_leaf _2])
		| _ -> (currentproc::lprocl, [make_node _2 ptree])
	)
# 1300 "src/sig_parser.ml"
               : 'process_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 192 "src/sig_parser.mly"
 (
		[]
	)
# 1308 "src/sig_parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    Obj.repr(
# 196 "src/sig_parser.mly"
 ( 
		[]
	)
# 1316 "src/sig_parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 's_declarations) in
    Obj.repr(
# 200 "src/sig_parser.mly"
 ( 
		let paras = _2 in 
		List.map (function (t,namelist) -> VARDEF((VAR_PARAMETER,T_CONST(t),namelist))) paras
	)
# 1326 "src/sig_parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 's_declarations) in
    Obj.repr(
# 205 "src/sig_parser.mly"
 (
		let paras = _2 in 
		List.map (function (t,namelist) -> VARDEF((VAR_PARAMETER,T_CONST(t),namelist))) paras
	)
# 1336 "src/sig_parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'outputs) in
    Obj.repr(
# 214 "src/sig_parser.mly"
 (
		(_2,_3)
	)
# 1346 "src/sig_parser.ml"
               : 'interface))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "src/sig_parser.mly"
 (
		[]
	)
# 1354 "src/sig_parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 225 "src/sig_parser.mly"
 (
		[]
	)
# 1362 "src/sig_parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 's_declarations) in
    Obj.repr(
# 229 "src/sig_parser.mly"
 (
		let invars = _2 in 
		List.map (function (t,namelist) -> VARDEF((VAR_INPUT,t,namelist))) invars
	)
# 1372 "src/sig_parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 's_declarations) in
    Obj.repr(
# 234 "src/sig_parser.mly"
 ( 
		let invars = _2 in 
		List.map (function (t,namelist) -> VARDEF((VAR_INPUT,t,namelist))) invars
	)
# 1382 "src/sig_parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 242 "src/sig_parser.mly"
 (
		[]
	)
# 1390 "src/sig_parser.ml"
               : 'outputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "src/sig_parser.mly"
 ( 
		[]
	)
# 1398 "src/sig_parser.ml"
               : 'outputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 's_declarations) in
    Obj.repr(
# 250 "src/sig_parser.mly"
 ( 
		let outvars = _2 in 
		List.map (function (t,namelist) -> VARDEF((VAR_OUTPUT,t,namelist))) outvars
	)
# 1408 "src/sig_parser.ml"
               : 'outputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 's_declarations) in
    Obj.repr(
# 255 "src/sig_parser.mly"
 ( 
		let outvars = _2 in 
		List.map (function (t,namelist) -> VARDEF((VAR_OUTPUT,t,namelist))) outvars
	)
# 1418 "src/sig_parser.ml"
               : 'outputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 's_declaration) in
    Obj.repr(
# 264 "src/sig_parser.mly"
 ( 
		[_1]
	)
# 1427 "src/sig_parser.ml"
               : 's_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_declarations) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_declaration) in
    Obj.repr(
# 268 "src/sig_parser.mly"
 ( 
		_1 @ [_3]
	)
# 1437 "src/sig_parser.ml"
               : 's_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'signaltype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'seq_defs) in
    Obj.repr(
# 275 "src/sig_parser.mly"
 (
		(_1,_2)
	)
# 1447 "src/sig_parser.ml"
               : 's_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'seq_def) in
    Obj.repr(
# 283 "src/sig_parser.mly"
 (
		[_1]
	)
# 1456 "src/sig_parser.ml"
               : 'seq_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'seq_defs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_def) in
    Obj.repr(
# 287 "src/sig_parser.mly"
 ( 
		_1 @ [_3]
	)
# 1466 "src/sig_parser.ml"
               : 'seq_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 293 "src/sig_parser.mly"
 (
		(_1,S_NOTHING)
	)
# 1475 "src/sig_parser.ml"
               : 'seq_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 297 "src/sig_parser.mly"
 ( 
		(_1,_3)
	)
# 1485 "src/sig_parser.ml"
               : 'seq_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 305 "src/sig_parser.mly"
 (
	)
# 1492 "src/sig_parser.ml"
               : 'directives))
; (fun __caml_parser_env ->
    Obj.repr(
# 308 "src/sig_parser.mly"
 (
	)
# 1499 "src/sig_parser.ml"
               : 'directives))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pragma_elements) in
    Obj.repr(
# 311 "src/sig_parser.mly"
 (
	)
# 1507 "src/sig_parser.ml"
               : 'directives))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pragma_element) in
    Obj.repr(
# 317 "src/sig_parser.mly"
 (
	)
# 1515 "src/sig_parser.ml"
               : 'pragma_elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pragma_elements) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pragma_element) in
    Obj.repr(
# 320 "src/sig_parser.mly"
 ( 
	)
# 1524 "src/sig_parser.ml"
               : 'pragma_elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 326 "src/sig_parser.mly"
 (
	)
# 1532 "src/sig_parser.ml"
               : 'pragma_element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pragma_objects) in
    Obj.repr(
# 329 "src/sig_parser.mly"
 ( 
	)
# 1541 "src/sig_parser.ml"
               : 'pragma_element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'pragma_objects) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 332 "src/sig_parser.mly"
 ( 
	)
# 1551 "src/sig_parser.ml"
               : 'pragma_element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 338 "src/sig_parser.mly"
 (
	)
# 1559 "src/sig_parser.ml"
               : 'pragma_objects))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pragma_objects) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 341 "src/sig_parser.mly"
 ( 
	)
# 1568 "src/sig_parser.ml"
               : 'pragma_objects))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'p_expr) in
    Obj.repr(
# 348 "src/sig_parser.mly"
 (
		_1
	)
# 1577 "src/sig_parser.ml"
               : 'p_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'p_exprs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'p_expr) in
    Obj.repr(
# 352 "src/sig_parser.mly"
 (
		let (leq,lloc,ltdef,lhprocl,lprocl,_) = _1 and (eq,loc,tdef,hprocl,procl,_) = _3 in
		(leq@eq,lloc@loc,ltdef@tdef,lhprocl@hprocl,lprocl@procl,[])
	)
# 1588 "src/sig_parser.ml"
               : 'p_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'general_process) in
    Obj.repr(
# 361 "src/sig_parser.mly"
 (
		_1
	)
# 1597 "src/sig_parser.ml"
               : 'p_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sig_def) in
    Obj.repr(
# 365 "src/sig_parser.mly"
 (
		([_1],[],[],[],[],[])
	)
# 1606 "src/sig_parser.ml"
               : 'p_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'clock_def) in
    Obj.repr(
# 369 "src/sig_parser.mly"
 (
		([_1],[],[],[],[],[])
	)
# 1615 "src/sig_parser.ml"
               : 'p_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'composition) in
    Obj.repr(
# 377 "src/sig_parser.mly"
 ( 
		_1
	)
# 1624 "src/sig_parser.ml"
               : 'general_process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'hidden_process) in
    Obj.repr(
# 381 "src/sig_parser.mly"
 (
		_1
	)
# 1633 "src/sig_parser.ml"
               : 'general_process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'confined_process) in
    Obj.repr(
# 385 "src/sig_parser.mly"
 ( 
		_1
	)
# 1642 "src/sig_parser.ml"
               : 'general_process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'p_exprs) in
    Obj.repr(
# 392 "src/sig_parser.mly"
 ( 
		_2
	)
# 1651 "src/sig_parser.ml"
               : 'composition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'general_process) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_names) in
    Obj.repr(
# 399 "src/sig_parser.mly"
 (
		let (leq,lloc,ltdef,lhprocl,lprocl,_) = _1 in
		let hiddenproc = 
			{
				hiddenlocals = _3;
				hiddenequations = leq;
			} 
		in ([],[],[],[hiddenproc],[],[])
	)
# 1667 "src/sig_parser.ml"
               : 'hidden_process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 412 "src/sig_parser.mly"
 (
		[(_1,S_NOTHING)]
	)
# 1676 "src/sig_parser.ml"
               : 'seq_names))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'seq_names) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 416 "src/sig_parser.mly"
 (
		_1 @ [(_3,S_NOTHING)]
	)
# 1686 "src/sig_parser.ml"
               : 'seq_names))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'general_process) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decleration_blk) in
    Obj.repr(
# 423 "src/sig_parser.mly"
 ( 
		let (leq,lloc,ltdef,lhprocl,lprocl,_) = _1
		and (loc,tdef,procl,ptree) = _2 in
		(leq,loc@lloc,tdef@ltdef,lhprocl,procl@lprocl,ptree)
	)
# 1698 "src/sig_parser.ml"
               : 'confined_process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declarations) in
    Obj.repr(
# 432 "src/sig_parser.mly"
 ( 
		_2
	)
# 1707 "src/sig_parser.ml"
               : 'decleration_blk))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'declarations) in
    Obj.repr(
# 436 "src/sig_parser.mly"
 ( 
		_2
	)
# 1716 "src/sig_parser.ml"
               : 'decleration_blk))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 443 "src/sig_parser.mly"
 ( 
		_1
	)
# 1725 "src/sig_parser.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declarations) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 447 "src/sig_parser.mly"
 ( 
		let (lloc,ltdef,lprocl,lptree) = _1 
		and (loc,tdef,procl,ptree) = _3 in
		((lloc@loc),(ltdef@tdef),(lprocl@procl),(lptree@ptree))
	)
# 1737 "src/sig_parser.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 's_declaration) in
    Obj.repr(
# 456 "src/sig_parser.mly"
 (
		let (t,namelist) = _1 in
		([VARDEF(VAR_LOCAL,t,namelist)],[],[],[])
	)
# 1747 "src/sig_parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration_types) in
    Obj.repr(
# 461 "src/sig_parser.mly"
 (
		([],_1,[],[])
	)
# 1756 "src/sig_parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration_constants) in
    Obj.repr(
# 465 "src/sig_parser.mly"
 (
		([_1],[],[],[])
	)
# 1765 "src/sig_parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'process_decl) in
    Obj.repr(
# 469 "src/sig_parser.mly"
 (
		let (procl,ptree) = _1 in
		([],[],procl,ptree)
	)
# 1775 "src/sig_parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 478 "src/sig_parser.mly"
 ( 
		SIGDEF(_1,_3)
	)
# 1785 "src/sig_parser.ml"
               : 'sig_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'process_call) in
    Obj.repr(
# 482 "src/sig_parser.mly"
 (
		SIGDEF(S_NOTHING,_1)
	)
# 1794 "src/sig_parser.ml"
               : 'sig_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sexpr_eq) in
    Obj.repr(
# 490 "src/sig_parser.mly"
 ( 
		CLKCONS(_1)
	)
# 1803 "src/sig_parser.ml"
               : 'clock_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 494 "src/sig_parser.mly"
 (
		CLKCONS(S_CLKLTE(_1,_3)) 
	)
# 1813 "src/sig_parser.ml"
               : 'clock_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 498 "src/sig_parser.mly"
 (
		CLKCONS(S_CLKGTE(_1,_3))
	)
# 1823 "src/sig_parser.ml"
               : 'clock_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 502 "src/sig_parser.mly"
 (
		CLKCONS(S_CLKDIFF(_1,_3))
	)
# 1833 "src/sig_parser.ml"
               : 'clock_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sexpr_eq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 509 "src/sig_parser.mly"
 ( 
		match _1 with
		| S_CLKEQ(l) -> S_CLKEQ(l@[_3])
		| _ -> S_NOTHING
	)
# 1845 "src/sig_parser.ml"
               : 'sexpr_eq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 515 "src/sig_parser.mly"
 ( 
		S_CLKEQ([_1;_3])
	)
# 1855 "src/sig_parser.ml"
               : 'sexpr_eq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'definition_types) in
    Obj.repr(
# 523 "src/sig_parser.mly"
 ( 
		_2
	)
# 1864 "src/sig_parser.ml"
               : 'declaration_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'definition_types) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'definition_type) in
    Obj.repr(
# 530 "src/sig_parser.mly"
 ( 
		_1 @ [_3]
	)
# 1874 "src/sig_parser.ml"
               : 'definition_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'definition_type) in
    Obj.repr(
# 534 "src/sig_parser.mly"
 ( 
		[_1]
	)
# 1883 "src/sig_parser.ml"
               : 'definition_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'external_notation) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 541 "src/sig_parser.mly"
 ( 
		TYPEDEF(T_EXTERNAL(_3),(_1,S_CONSTANT(S_STRING(_5))))
	)
# 1894 "src/sig_parser.ml"
               : 'definition_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'external_notation) in
    Obj.repr(
# 545 "src/sig_parser.mly"
 ( 
		TYPEDEF(T_EXTERNAL(_3),(_1,S_NOTHING))
	)
# 1904 "src/sig_parser.ml"
               : 'definition_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'signaltype) in
    Obj.repr(
# 549 "src/sig_parser.mly"
 ( 
		TYPEDEF(_3,(_1,S_NOTHING))
	)
# 1914 "src/sig_parser.ml"
               : 'definition_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 553 "src/sig_parser.mly"
 ( 
		TYPEDEF(NO_TYPE,(_1,S_NOTHING))
	)
# 1923 "src/sig_parser.ml"
               : 'definition_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'enumelements) in
    Obj.repr(
# 558 "src/sig_parser.mly"
 ( 
		TYPEDEF(T_ENUM(_1,_5),(_1,S_NOTHING))
	)
# 1933 "src/sig_parser.ml"
               : 'definition_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enumelements) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 565 "src/sig_parser.mly"
 ( 
		_1 @ [_3] 
	)
# 1943 "src/sig_parser.ml"
               : 'enumelements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 569 "src/sig_parser.mly"
 ( 
		[_1]
	)
# 1952 "src/sig_parser.ml"
               : 'enumelements))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'signaltype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'definition_constants) in
    Obj.repr(
# 577 "src/sig_parser.mly"
 ( 
		VARDEF(VAR_LOCAL,T_CONST(_2),_3)
	)
# 1962 "src/sig_parser.ml"
               : 'declaration_constants))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'definition_constants) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'definition_constant) in
    Obj.repr(
# 584 "src/sig_parser.mly"
 ( 
		_1 @ [_3]
	)
# 1972 "src/sig_parser.ml"
               : 'definition_constants))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'definition_constant) in
    Obj.repr(
# 588 "src/sig_parser.mly"
 (
		[_1]
	)
# 1981 "src/sig_parser.ml"
               : 'definition_constants))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'external_notation) in
    Obj.repr(
# 595 "src/sig_parser.mly"
 ( 
		(_1,S_VAR(_3))
	)
# 1991 "src/sig_parser.ml"
               : 'definition_constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 599 "src/sig_parser.mly"
 ( 
		(_1,_3)
	)
# 2001 "src/sig_parser.ml"
               : 'definition_constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 603 "src/sig_parser.mly"
 ( 
		(_1,S_NOTHING)
	)
# 2010 "src/sig_parser.ml"
               : 'definition_constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 611 "src/sig_parser.mly"
 ( 
		S_VAR(_1)
	)
# 2019 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 615 "src/sig_parser.mly"
 ( 
		S_CONSTANT(S_TRUE)
	)
# 2027 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 619 "src/sig_parser.mly"
 ( 
		S_CONSTANT(S_FALSE)
	)
# 2035 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 623 "src/sig_parser.mly"
 ( 
		S_CONSTANT(S_INT(_1))
	)
# 2044 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 627 "src/sig_parser.mly"
 ( 
		S_CONSTANT(S_REAL(_1))
	)
# 2053 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 632 "src/sig_parser.mly"
 ( 
		S_CONSTANT(S_CHAR(_1))
	)
# 2062 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 636 "src/sig_parser.mly"
 ( 
		S_CONSTANT(S_STRING(_1))
	)
# 2071 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 640 "src/sig_parser.mly"
 ( 
		S_ENUMITEM("",S_CONSTANT(S_STRING(_2)))
	)
# 2080 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 644 "src/sig_parser.mly"
 ( 
		S_ENUMITEM(_1,S_CONSTANT(S_STRING(_3)))
	)
# 2090 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 's_expr) in
    Obj.repr(
# 648 "src/sig_parser.mly"
 (
		S_ARRAYITEM(_1,_3)
	)
# 2100 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'scalartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 's_expr) in
    Obj.repr(
# 653 "src/sig_parser.mly"
 ( 
		 S_CAST(_1,_3)
	)
# 2110 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 's_expr) in
    Obj.repr(
# 658 "src/sig_parser.mly"
 (
		S_DELAY(_1)
	)
# 2119 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 662 "src/sig_parser.mly"
 (
		S_DELAYBY(_1,_3)
	)
# 2129 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 's_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 666 "src/sig_parser.mly"
 (
		S_DELAYINIT(_1,_4)
	)
# 2139 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 670 "src/sig_parser.mly"
 (
		S_DELAYBYINIT(_1,_3,_5)
	)
# 2150 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 674 "src/sig_parser.mly"
 (
		S_WINDOW(_1,_3)
	)
# 2160 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 678 "src/sig_parser.mly"
 (
		S_WINDOWINIT(_1,_3,_5)
	)
# 2171 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 683 "src/sig_parser.mly"
 (
		S_CELL(_1,_3)
	)
# 2181 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 687 "src/sig_parser.mly"
 (
		S_CELLINIT(_1,_3,_5)
	)
# 2192 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 691 "src/sig_parser.mly"
 ( 
		S_DEFAULT(_1,_3)
	)
# 2202 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 695 "src/sig_parser.mly"
 ( 
		S_WHEN(_1,_3)
	)
# 2212 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 700 "src/sig_parser.mly"
 (
		S_CLKZERO 
	)
# 2220 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 704 "src/sig_parser.mly"
 (
		S_CLKHAT(_2)
	)
# 2229 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 708 "src/sig_parser.mly"
 ( 
		S_CLKWHEN(_2)
	)
# 2238 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 712 "src/sig_parser.mly"
 ( 
		S_CLKPLUS(_1,_3)
	)
# 2248 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 716 "src/sig_parser.mly"
 ( 
		S_CLKMINUS(_1,_3)
	)
# 2258 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 720 "src/sig_parser.mly"
 ( 
		S_CLKMULT(_1,_3)
	)
# 2268 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 725 "src/sig_parser.mly"
 ( 
		S_UNARY(S_NOT,_2)
	)
# 2277 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 729 "src/sig_parser.mly"
 ( 
		S_BINARY(S_OR,_1,_3)
	)
# 2287 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 733 "src/sig_parser.mly"
 ( 
		S_BINARY(S_AND,_1,_3)
	)
# 2297 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 737 "src/sig_parser.mly"
 ( 
		S_BINARY(S_XOR,_1,_3)
	)
# 2307 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 741 "src/sig_parser.mly"
 ( 
		S_BINARY(S_EQ,_1,_3)
	)
# 2317 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 745 "src/sig_parser.mly"
 ( 
		S_BINARY(S_DIFF,_1,_3)
	)
# 2327 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 749 "src/sig_parser.mly"
 ( 
		S_BINARY(S_GT,_1,_3)
	)
# 2337 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 753 "src/sig_parser.mly"
 ( 
		S_BINARY(S_GTE,_1,_3)
	)
# 2347 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 757 "src/sig_parser.mly"
 ( 
		S_BINARY(S_LT,_1,_3)
	)
# 2357 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 761 "src/sig_parser.mly"
 ( 
		S_BINARY(S_LTE,_1,_3)
	)
# 2367 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 765 "src/sig_parser.mly"
 ( 
		S_BINARY(S_PLUS,_1,_3)
	)
# 2377 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 769 "src/sig_parser.mly"
 ( 
		S_BINARY(S_MINUS,_1,_3)
	)
# 2387 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 773 "src/sig_parser.mly"
 ( 
		S_BINARY(S_MULT,_1,_3)
	)
# 2397 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 777 "src/sig_parser.mly"
 ( 
		S_BINARY(S_DIV,_1,_3)
	)
# 2407 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 781 "src/sig_parser.mly"
 ( 
		S_BINARY(S_MODULO,_1,_3)
	)
# 2417 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 785 "src/sig_parser.mly"
 ( 
		S_BINARY(S_POWER,_1,_3)
	)
# 2427 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 789 "src/sig_parser.mly"
 ( 
		S_BINARY(S_COPLEXDENOTE,_1,_3)
	)
# 2437 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 793 "src/sig_parser.mly"
 ( 
		S_UNARY(S_UPLUS,_2)
	)
# 2446 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 797 "src/sig_parser.mly"
 ( 
		S_UNARY(S_UMINUS,_2)
	)
# 2455 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 's_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 's_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 802 "src/sig_parser.mly"
 ( 
		S_IF(_2,_4,_6)
	)
# 2466 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 's_expr) in
    Obj.repr(
# 807 "src/sig_parser.mly"
 (
		S_PCLOSE(_2)
	)
# 2475 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 's_exprs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 's_expr) in
    Obj.repr(
# 812 "src/sig_parser.mly"
 ( 
		S_TUPLES(_2 @ [_4])
	)
# 2485 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'process_call) in
    Obj.repr(
# 817 "src/sig_parser.mly"
 (
		_1
	)
# 2494 "src/sig_parser.ml"
               : 's_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 825 "src/sig_parser.mly"
 ( 
		S_PROCESSCALL(_1,[],[],[])
	)
# 2503 "src/sig_parser.ml"
               : 'process_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 829 "src/sig_parser.mly"
 ( 
		S_PROCESSCALL(_1,[],[],[])
	)
# 2512 "src/sig_parser.ml"
               : 'process_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 's_exprs) in
    Obj.repr(
# 833 "src/sig_parser.mly"
 ( 
		S_PROCESSCALL(_1,_3,[],[])
	)
# 2522 "src/sig_parser.ml"
               : 'process_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 's_exprs) in
    Obj.repr(
# 837 "src/sig_parser.mly"
 (
		S_PROCESSCALL(_1,[],_3,[])
	)
# 2532 "src/sig_parser.ml"
               : 'process_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    Obj.repr(
# 841 "src/sig_parser.mly"
 (
		S_PROCESSCALL(_1,[],[],[])
	)
# 2541 "src/sig_parser.ml"
               : 'process_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 's_exprs) in
    Obj.repr(
# 845 "src/sig_parser.mly"
 (
		S_PROCESSCALL(_1,_3,[],[])
	)
# 2551 "src/sig_parser.ml"
               : 'process_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 's_exprs) in
    Obj.repr(
# 849 "src/sig_parser.mly"
 (
		S_PROCESSCALL(_1,[],_5,[])
	)
# 2561 "src/sig_parser.ml"
               : 'process_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 's_exprs) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 's_exprs) in
    Obj.repr(
# 853 "src/sig_parser.mly"
 (
		S_PROCESSCALL(_1,_3,_6,[])
	)
# 2572 "src/sig_parser.ml"
               : 'process_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 861 "src/sig_parser.mly"
 (
		[_1]
	)
# 2581 "src/sig_parser.ml"
               : 's_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 's_exprs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 865 "src/sig_parser.mly"
 (
		_1 @ [_3]
	)
# 2591 "src/sig_parser.ml"
               : 's_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 874 "src/sig_parser.mly"
 ( 
		T_NAMED_TYPED(_1)
	)
# 2600 "src/sig_parser.ml"
               : 'signaltype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'scalartype) in
    Obj.repr(
# 878 "src/sig_parser.mly"
 ( 
		_1
	)
# 2609 "src/sig_parser.ml"
               : 'signaltype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arraytype) in
    Obj.repr(
# 882 "src/sig_parser.mly"
 ( 
		_1
	)
# 2618 "src/sig_parser.ml"
               : 'signaltype))
; (fun __caml_parser_env ->
    Obj.repr(
# 889 "src/sig_parser.mly"
 (
		T_EVENT
	)
# 2626 "src/sig_parser.ml"
               : 'scalartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 893 "src/sig_parser.mly"
 (
		T_BOOL
	)
# 2634 "src/sig_parser.ml"
               : 'scalartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 897 "src/sig_parser.mly"
 (
		T_INT(SHORT,SIGNED)
	)
# 2642 "src/sig_parser.ml"
               : 'scalartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 901 "src/sig_parser.mly"
 (
		T_INT(NO_SIZE,SIGNED)
	)
# 2650 "src/sig_parser.ml"
               : 'scalartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 905 "src/sig_parser.mly"
 (
		T_INT(LONG,SIGNED)
	)
# 2658 "src/sig_parser.ml"
               : 'scalartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 909 "src/sig_parser.mly"
 (
		T_REAL
	)
# 2666 "src/sig_parser.ml"
               : 'scalartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 913 "src/sig_parser.mly"
 (
		T_COMPLEX
	)
# 2674 "src/sig_parser.ml"
               : 'scalartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 917 "src/sig_parser.mly"
 (
		T_CHAR(UNSIGNED)
	)
# 2682 "src/sig_parser.ml"
               : 'scalartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 921 "src/sig_parser.mly"
 (
		T_STRING
	)
# 2690 "src/sig_parser.ml"
               : 'scalartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'arraysizes) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'signaltype) in
    Obj.repr(
# 928 "src/sig_parser.mly"
 (
		T_ARRAY(_4,_2)
	)
# 2700 "src/sig_parser.ml"
               : 'arraytype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 935 "src/sig_parser.mly"
 (
		[_1] 
	)
# 2709 "src/sig_parser.ml"
               : 'arraysizes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arraysizes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 's_expr) in
    Obj.repr(
# 939 "src/sig_parser.mly"
 ( 
		_1 @ [_3]
	)
# 2719 "src/sig_parser.ml"
               : 'arraysizes))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 946 "src/sig_parser.mly"
 ( 
		_2
	)
# 2728 "src/sig_parser.ml"
               : 'external_notation))
(* Entry interpret *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let interpret (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Sig_abs.sig_file)
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Sig_abs.sig_file)
;;
